/*eslint-disable*/
import React, { useState, useEffect } from 'react';
import Button from '@material-ui/core/Button';
import Notification from 'components/Snackbar/Notification.js';
import CustomTable from '../../components/Table/Table';
import ConfirmationModal from '../../components/Modal/confirmationModal';
import axios from 'axios';
import {
  getMaterialReceivingUrl,
  deleteMaterialReceivingUrl
} from '../../public/endpoins';
import Loader from 'react-loader-spinner';

import DialogTitle from '@material-ui/core/DialogTitle';
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';

const tableHeading = [
  'Item Code',
  'Item Name',
  'Purchase Orders',
  'Purchase Requests',
  'Status',
  'Vendor',
  'PO Sent Date',
  'Action'
];
const tableDataKeys = [
  'itemCode',
  'itemName',
  ['poId', 'generated'],
  ['prId', 'generatedBy'],
  'status',
  ['vendorId', 'englishName'],
  'poSentDate'
];

const keysForOrder = [
  '_id',
  'paymentTerm',
  'purchaseOrderNo',
  'generated',
  'date',
  'shippingTerm',
  'vendorId',
  'vendorEmail',
  'vendorPhoneNo',
  'vendorAddress',
  'status'
];

const HeadingForOrder = [
  'Id',
  'Payment Term',
  'Purchase OrderNo',
  'Generated',
  'Date',
  'Shipping Term',
  'Vendor Id',
  'Vendor Email',
  'Vendor PhoneNo',
  'Vendor Address',
  'Status'
];

const keysForRequest = ['_id', 'generatedBy', 'date', 'vendorId', 'status'];

const HeadingForRequest = ['Id', 'Generated By', 'Date', 'Vendor Id', 'Status'];

const actions = { edit: true, delete: true };

export default function PurchaseRequest(props) {
  const [materialReceivings, setMaterialReceivings] = useState('');
  const [vendors, setVendor] = useState('');
  const [statues, setStatus] = useState('');
  const [purchaseRequests, setPurchaseRequests] = useState('');

  const [purchaseOrders, setPurchaseOrders] = useState('');

  const [deleteItem, setdeleteItem] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');
  const [openNotification, setOpenNotification] = useState(false);

  const [isDialogOpen, setDialogOpen] = useState(false);

  const [selectedPurchaseOrder, setSelectedPurchaseOrder] = useState('');
  const [selectedPurchaseRequest, setSelectedPurchaseRequest] = useState('');

  if (openNotification) {
    setTimeout(() => {
      setOpenNotification(false);
      setErrorMsg('');
    }, 2000);
  }

  function getPurchaseRequests() {
    axios
      .get(getMaterialReceivingUrl)
      .then(res => {
        if (res.data.success) {
          setMaterialReceivings(res.data.data.materialReceivings);
          setVendor(res.data.data.vendors);
          setStatus(res.data.data.statues);
          setPurchaseOrders(res.data.data.purchaseOrders);
          setPurchaseRequests(res.data.data.purchaseRequests);
        } else if (!res.data.success) {
          setErrorMsg(res.data.error);
          setOpenNotification(true);
        }
        return res;
      })
      .catch(e => {
        console.log('error: ', e);
      });
  }

  useEffect(() => {
    getPurchaseRequests();
  }, []);

  const addNewItem = () => {
    let path = `materialreceiving/next/add`;
    props.history.push({
      pathname: path,
      state: {
        comingFor: 'add',
        vendors,
        statues,
        purchaseRequests,
        purchaseOrders
      }
    });
  };

  function handleEdit(rec) {
    let path = `materialreceiving/next/edit`;
    props.history.push({
      pathname: path,
      state: {
        comingFor: 'edit',
        selectedItem: rec,
        vendors,
        statues,
        purchaseRequests,
        purchaseOrders
      }
    });
  }

  function handleDelete(id) {
    setModalVisible(true);
    setdeleteItem(id);
  }

  function deleteVendor() {
    const params = {
      _id: deleteItem
    };

    axios
      .delete(deleteMaterialReceivingUrl + '/' + params._id)
      .then(res => {
        if (res.data.success) {
          setdeleteItem('');
          setModalVisible(false);
          window.location.reload(false);
        } else if (!res.data.success) {
          setErrorMsg(res.data.error);
          setOpenNotification(true);
        }
        return res;
      })
      .catch(e => {
        console.log('error while deletion ', e);
      });
  }

  const handleCloseDialog = () => {
    setDialogOpen(false);
    setSelectedPurchaseOrder('');
    setSelectedPurchaseRequest('');
  };

  function handleModelMaterialReceiving(obj, value) {
    if (value[0] === 'poId') {
      console.log(obj, value);
      setDialogOpen(true);
      setSelectedPurchaseOrder(obj.poId);
      setSelectedPurchaseRequest('');
    } else if (value[0] === 'prId') {
      console.log(obj, value);
      setDialogOpen(true);
      setSelectedPurchaseRequest(obj.prId);
      setSelectedPurchaseOrder('');
    }
  }

  return (
    <div>
      {vendors ? (
        <div>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <Button
                onClick={addNewItem}
                style={{ width: 65, height: 65, borderRadius: 65 / 2 }}
                variant="contained"
                color="primary"
              >
                <i className="zmdi zmdi-plus zmdi-hc-3x"></i>
              </Button>
            </div>
          </div>

          <div>
            <CustomTable
              tableData={materialReceivings}
              tableDataKeys={tableDataKeys}
              tableHeading={tableHeading}
              action={actions}
              handleEdit={handleEdit}
              handleDelete={handleDelete}
              handleModelMaterialReceiving={handleModelMaterialReceiving}
            />
          </div>

          <ConfirmationModal
            modalVisible={modalVisible}
            msg="Are you sure want to delete the record?"
            hideconfirmationModal={() => setModalVisible(false)}
            onConfirmDelete={() => deleteVendor()}
            setdeleteItem={() => setdeleteItem('')}
          />

          <Notification msg={errorMsg} open={openNotification} />
        </div>
      ) : (
        <div
          style={{
            width: '70%',
            height: '100%',
            position: 'fixed',
            display: 'flex',
            justifyContent: 'center'
          }}
        >
          <Loader type="TailSpin" color="red" height={50} width={50} />
        </div>
      )}

      <Dialog
        onClose={handleCloseDialog}
        aria-labelledby="simple-dialog-title"
        open={isDialogOpen}
        disableBackdropClick
        disableEscapeKeyDown
        maxWidth="md"
        fullWidth={true}
      >
        <DialogTitle id="simple-dialog-title" style={{ textAlign: 'center' ,backgroundColor:"#E2E2E2"}}>
          {selectedPurchaseOrder ? 'Purchase Order' : 'Purchase Request'}
        </DialogTitle>
        <DialogContent style={{backgroundColor:"#E2E2E2"}}>
          <div>
            {selectedPurchaseOrder
              ? keysForOrder.map((k, index) => {
                  return (
                    <div
                      style={{
                        flexDirection: 'row',
                        display: 'flex',
                        alignItems: 'center',
                        marginTop: 20,
                        marginLeft: 20
                      }}
                    >
                      <h5 style={{ fontWeight: '700' }}>
                        {HeadingForOrder[index]}:{' '}
                      </h5>{' '}
                      <h5>{selectedPurchaseOrder[k]}</h5>
                    </div>
                  );
                })
              : keysForRequest.map((k, index) => {
                  return (
                    <div
                      style={{
                        flexDirection: 'row',
                        display: 'flex',
                        alignItems: 'center',
                        marginTop: 20,
                        marginLeft: 20
                      }}
                    >
                      <h6 style={{ fontWeight: '700' }}>
                        {HeadingForRequest[index]}:
                      </h6>
                   
                      <h6> {selectedPurchaseRequest[k]}</h6>
                    </div>
                  );
                })}
          </div>

          <div
            style={{
              display: 'flex',
              justifyContent: 'center',
              marginBottom: 10
            }}
          >
            <Button
              onClick={handleCloseDialog}
              variant="contained"
              // color="primary"
            >
              {' '}
              Cancel{' '}
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
