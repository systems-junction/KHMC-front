/*eslint-disable*/
import React, { useState, useEffect } from "react";
// @material-ui/core components
import Button from "@material-ui/core/Button";
import Notification from "../../components/Snackbar/Notification.js";
import Paper from "@material-ui/core/Paper";
import CustomTable from "../../components/Table/Table";
import ConfirmationModal from "../../components/Modal/confirmationModal";
import axios from "axios";
import {
  getPurchaseRequestUrl,
  deletePurchaseRequestUrl,
} from "../../public/endpoins";
import Loader from "react-loader-spinner";

import Header from "../../components/Header/Header";

import Add_New from "../../assets/img/Add_New.png";
import purchase_request from "../../assets/img/purchase request.png";
import Back_Arrow from "../../assets/img/Back_Arrow.png";

import Search from "../../assets/img/Search.png";
import Control_Room from "../../assets/img/Control_Room.png";

import Edit from "../../assets/img/Edit.png";

import Inactive from "../../assets/img/Inactive.png";

import Active from "../../assets/img/Active.png";

import DialogTitle from "@material-ui/core/DialogTitle";
import Dialog from "@material-ui/core/Dialog";
import DialogContent from "@material-ui/core/DialogContent";

import Table from "@material-ui/core/Table";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";

import { makeStyles } from "@material-ui/core/styles";

import styles from "../../assets/jss/material-dashboard-react/components/tableStyle";
const useStyles = makeStyles(styles);

const tableHeading = [
  "Request No",
  "Generated By",
  "Vendor",
  "Status",
  "Action",
];
const tableDataKeys = ["requestNo", "generated", "vendorId", "committeeStatus"];

const actions = { add: true };

export default function PurchaseRequest(props) {
  const [purchaseRequests, setPurchaseRequest] = useState("");
  const [vendors, setVendor] = useState("");
  const [statues, setStatus] = useState("");
  const [items, setItems] = useState("");
  const [deleteItem, setdeleteItem] = useState("");
  const [modalVisible, setModalVisible] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [openNotification, setOpenNotification] = useState(false);

  const [selectedPurchaseRequests, setSelectedPurchaseRequest] = useState([]);

  if (openNotification) {
    setTimeout(() => {
      setOpenNotification(false);
      setErrorMsg("");
    }, 2000);
  }

  const classes = useStyles();

  const handleAdd = (prObj) => {};

  const replaceSlugToTitle = (val) => {
    if (val === "in_active") {
      return <img src={In_Active} style={{ width: "45%", height: "auto" }} />;
    } else if (val === "active") {
      return (
        <img
          src={Active}
          style={{ maxWidth: "60%", height: "auto", alignSelf: "center" }}
        />
      );
    }
    if (val === "pending" || val === "to_do") {
      if (currentUser && currentUser.staffTypeId.type === "Committe Member") {
        return (
          <h6 style={{ fontWeight: "700", color: "#2C73D2" }}>
            {val === "to_do" ? "To Do" : val === "pending" ? "Pending" : ""}
          </h6>
        );
      } else {
        return (
          <h6 style={{ fontWeight: "700", color: "#2C73D2" }}>
            {val === "to_do" ? "To Do" : "Pending"}
          </h6>
        );
      }
    } else if (val === "in_progress") {
      return (
        <h6 style={{ fontWeight: "700", color: "#FF6F91" }}>In Progress</h6>
      );
    } else if (val === "complete" || val === "approved") {
      return (
        <h6 style={{ color: "white", fontWeight: "700", color: "#845EC2" }}>
          {val === "complete" ? "Complete" : "Approved"}
        </h6>
      );
    }

    return val;
  };

  const formatDate = (date) => {
    const d = new Date(date);
    return (
      d.getDate() +
      "/" +
      (d.getMonth() + 1) +
      "/" +
      d.getFullYear() +
      " " +
      d.toLocaleTimeString()
    );
  };

  function checkAvailability(prObj) {
    for (let i = 0; i < selectedPurchaseRequests.length; i++) {
      if (prObj._id === selectedPurchaseRequests[i]._id) {
        return false;
      }
    }
    return true;
  }

  function handleDone() {
    props.handleAddPR(selectedPurchaseRequests);
  }

  console.log(props.vendors);

  return (
    <div
      style={{
        flex: 4,
        display: "flex",
        flexDirection: "column",
      }}
    >
      <div>
        <Table>
          {tableHeading !== undefined ? (
            <TableHead
              className={classes["TableHeader"]}
              style={{
                backgroundColor: "#2873cf",
              }}
            >
              <TableRow>
                {tableHeading.map((prop, index) => {
                  return (
                    <>
                      <TableCell
                        className={classes.tableHeadCell}
                        style={{
                          color: "white",
                          fontWeight: "700",
                          paddingTop: 30,
                          paddingBottom: 30,
                          textAlign: "center",
                          borderTopLeftRadius: index === 0 ? 45 : 0,
                          borderTopRightRadius:
                            index === tableHeading.length - 1 ? 45 : 0,
                        }}
                        key={prop}
                      >
                        {prop}
                      </TableCell>
                    </>
                  );
                })}
              </TableRow>
            </TableHead>
          ) : null}

          <div style={{ height: 25, width: "100%" }}></div>

          <TableBody style={{ marginTop: 20 }}>
            {props.tableData &&
              props.tableData.map((prop, index) => {
                return (
                  <>
                    <TableRow
                      key={index}
                      className={classes.tableBodyRow}
                      style={{
                        backgroundColor: "white",
                        cursor: "pointer",
                      }}
                    >
                      {tableDataKeys
                        ? tableDataKeys.map((val, key) => {
                            // console.log(key);
                            if (val === "date") {
                              return (
                                <TableCell
                                  className={classes.tableCell}
                                  key={key}
                                  style={{
                                    textAlign: "center",
                                  }}
                                >
                                  {formatDate(prop[val])}
                                </TableCell>
                              );
                            }
                            if (val === "vendorId") {
                              return (
                                <TableCell
                                  className={classes.tableCell}
                                  key={key}
                                  style={{
                                    textAlign: "center",
                                  }}
                                >
                                  {typeof prop[val] === "string"
                                    ? props.vendors.map((v) => {
                                        if (v._id === prop[val]) {
                                          return v.englishName;
                                        }
                                      })
                                    : prop[val].englishName}

                                  {/* {prop[val]} */}
                                </TableCell>
                              );
                            } else {
                              return (
                                <TableCell
                                  className={classes.tableCell}
                                  key={key}
                                  onClick={() => handleClick(prop, val)}
                                  style={{
                                    textAlign: "center",
                                    cursor: props.handleModelMaterialReceiving
                                      ? "pointer"
                                      : "",

                                    borderTopLeftRadius: key === 0 ? 15 : 0,
                                    borderBottomLeftRadius: key === 0 ? 15 : 0,

                                    borderWidth: 0,
                                  }}
                                >
                                  {Array.isArray(val)
                                    ? prop[val[0]]
                                      ? prop[val[0]][val[1]]
                                      : null
                                    : val.toLowerCase() === "timestamp"
                                    ? new Intl.DateTimeFormat(
                                        "en-US",
                                        dateOptions
                                      ).format(Date.parse(prop[val]))
                                    : // : `${replaceSlugToTitle(prop[val])}`}
                                      replaceSlugToTitle(prop[val])}
                                </TableCell>
                              );
                            }
                          })
                        : null}
                      <TableCell
                        style={{
                          cursor: "pointer",
                          borderTopRightRadius: 15,
                          borderBottomRightRadius: 15,

                          borderWidth: 0,
                        }}
                        className={classes.tableCell}
                        colSpan="2"
                      >
                        <span onClick={() => props.viewItem(prop.item)}>
                          <i className=" ml-10 zmdi zmdi-eye zmdi-hc-3x" />
                        </span>
                      </TableCell>
                    </TableRow>

                    <TableRow style={{ height: 20 }} />
                  </>
                );
              })}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}
