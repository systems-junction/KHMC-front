/*eslint-disable*/
import React, { useState, useEffect } from "react";
// @material-ui/core components
import Button from "@material-ui/core/Button";
import Notification from "../../components/Snackbar/Notification.js";
import Paper from "@material-ui/core/Paper";
import CustomTable from "../../components/Table/Table";
import ConfirmationModal from "../../components/Modal/confirmationModal";
import axios from "axios";
import {
  getPurchaseRequestUrl,
  deletePurchaseRequestUrl,
} from "../../public/endpoins";
import Loader from "react-loader-spinner";

import Header from "../../components/Header/Header";

import Add_New from "../../assets/img/Add_New.png";
import purchase_request from "../../assets/img/purchase request.png";
import Back_Arrow from "../../assets/img/Back_Arrow.png";

import Search from "../../assets/img/Search.png";
import Control_Room from "../../assets/img/Control_Room.png";

import Edit from "../../assets/img/Edit.png";

import Inactive from "../../assets/img/Inactive.png";

import Active from "../../assets/img/Active.png";

import DialogTitle from "@material-ui/core/DialogTitle";
import Dialog from "@material-ui/core/Dialog";
import DialogContent from "@material-ui/core/DialogContent";

import Table from "@material-ui/core/Table";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";

import { makeStyles } from "@material-ui/core/styles";

import styles from "../../assets/jss/material-dashboard-react/components/tableStyle";
const useStyles = makeStyles(styles);

const stylesB = {
  stylesForButton: {
    color: "white",
    cursor: "pointer",
    borderRadius: 15,
    backgroundColor: "#2c6ddd",
    width: "140px",
    height: "50px",
    outline: "none",
  },
};

const tableHeading = [
  "Request No",
  "Generated By",
  "Vendor",
  "Status",
  "Action",
];
const tableDataKeys = [
  "requestNo",
  "generated",
  ["vendorId", "englishName"],
  "committeeStatus",
];

const actions = { add: true };

export default function PurchaseRequest(props) {
  const [purchaseRequests, setPurchaseRequest] = useState("");
  const [vendors, setVendor] = useState("");
  const [statues, setStatus] = useState("");
  const [items, setItems] = useState("");
  const [deleteItem, setdeleteItem] = useState("");
  const [modalVisible, setModalVisible] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [openNotification, setOpenNotification] = useState(false);

  const [selectedPurchaseRequests, setSelectedPurchaseRequest] = useState([]);

  if (openNotification) {
    setTimeout(() => {
      setOpenNotification(false);
      setErrorMsg("");
    }, 2000);
  }

  const classes = useStyles();

  function getPurchaseRequests() {
    axios
      .get(getPurchaseRequestUrl)
      .then((res) => {
        if (res.data.success) {
          console.log(res.data.data.purchaseRequest);

          let temp = res.data.data.purchaseRequest.filter((pr) => {
            return (
              pr.committeeStatus === "approved" && pr.generated === "Manual"
            );
          });
          setPurchaseRequest(temp.reverse());
          setVendor(res.data.data.vendor);
          setStatus(res.data.data.status);
          setItems(res.data.data.items);
        } else if (!res.data.success) {
          setErrorMsg(res.data.error);
          setOpenNotification(true);
        }
        return res;
      })
      .catch((e) => {
        console.log("error: ", e);
      });
  }

  useEffect(() => {
    getPurchaseRequests();
  }, []);

  const handleAdd = (prObj) => {
    let temp = [...selectedPurchaseRequests];

    if (temp.length === 0) {
      temp.push(prObj);
    } else {
      for (let i = 0; i < selectedPurchaseRequests.length; i++) {
        if (
          selectedPurchaseRequests[i].vendorId._id === prObj.vendorId._id &&
          prObj._id !== selectedPurchaseRequests[i]._id
        ) {
          temp.push(prObj);
        }
      }
    }

    setSelectedPurchaseRequest(temp);
  };

  const handleRemove = (prObj) => {
    let temp;
    temp = selectedPurchaseRequests.filter((item) => item._id !== prObj._id);

    setSelectedPurchaseRequest(temp);
  };

  // function addNewPR() {
  //   const path = "/home/controlroom/wms/pr/add";

  //   props.history.push({
  //     path: path,
  //     state: { comingFor: "add" },
  //   });
  // }

  const replaceSlugToTitle = (val) => {
    if (val === "in_active") {
      return (
        <Button
          style={stylesB.stylesForInActive}
          variant="contained"
          color="primary"
        >
          <strong>In active</strong>
        </Button>
      );
    } else if (val === "active") {
      return (
        <Button
          style={stylesB.stylesForActive}
          variant="contained"
          color="primary"
        >
          <strong>Active</strong>
        </Button>
      );
    }
    if (val === "pending" || val === "to_do") {
      if (currentUser && currentUser.staffTypeId.type === "Committe Member") {
        return (
          <h6 style={{ fontWeight: "700", color: "#2C73D2" }}>
            {val === "to_do" ? (
              <Button
                style={stylesB.stylesForActive}
                variant="contained"
                color="primary"
              >
                <strong>To Do</strong>
              </Button>
            ) : val === "pending" ? (
              <Button
                style={stylesB.stylesForActive}
                variant="contained"
                color="primary"
              >
                <strong>Pending</strong>
              </Button>
            ) : (
              ""
            )}
          </h6>
        );
      } else {
        return (
          <>
            {val === "to_do" ? (
              <Button
                style={stylesB.stylesForActive}
                variant="contained"
                color="primary"
              >
                <strong>To Do</strong>
              </Button>
            ) : (
              <Button
                style={stylesB.stylesForActive}
                variant="contained"
                color="primary"
              >
                <strong>Pending</strong>
              </Button>
            )}
          </>
        );
      }
    } else if (val === "in_progress") {
      return (
        <Button
          style={stylesB.stylesForActive}
          variant="contained"
          color="primary"
        >
          <strong>In Progress</strong>
        </Button>
      );
    } else if (val === "complete" || val === "approved") {
      return (
        <>
          {val === "complete" ? (
            <Button
              style={stylesB.stylesForActive}
              variant="contained"
              color="primary"
            >
              <strong>Complete</strong>
            </Button>
          ) : (
            <Button
              style={stylesB.stylesForActive}
              variant="contained"
              color="primary"
            >
              <strong>Approved</strong>
            </Button>
          )}
        </>
      );
    }

    return val;
  };

  const formatDate = (date) => {
    const d = new Date(date);
    return (
      d.getDate() +
      "/" +
      (d.getMonth() + 1) +
      "/" +
      d.getFullYear() +
      " " +
      d.toLocaleTimeString()
    );
  };

  function checkAvailability(prObj) {
    for (let i = 0; i < selectedPurchaseRequests.length; i++) {
      if (prObj._id === selectedPurchaseRequests[i]._id) {
        return false;
      }
    }
    return true;
  }

  function handleDone() {
    console.log("selected purchase request", selectedPurchaseRequests);
    props.handleAddPR(selectedPurchaseRequests);
  }

  return (
    // <div
    //   style={{
    //     display: "flex",
    //     flexDirection: "column",
    //     flex: 1,
    //     position: "fixed",
    //     width: "100%",
    //     height: "100%",
    //     backgroundColor: "#60d69f",
    //     overflowY: "scroll",
    //   }}
    // >
    //   <div
    //     style={{
    //       flex: 4,
    //       display: "flex",
    //       flexDirection: "column",
    //     }}
    //   >

    <Dialog
      onClose={() => props.handleAddPR("")}
      fullWidth={true}
      maxWidth={"lg"}
      bodyStyle={{ backgroundColor: "red" }}
      contentStyle={{ backgroundColor: "red" }}
      aria-labelledby="simple-dialog-title"
      open={props.openPRDialog}
    >
      <DialogContent style={{ backgroundColor: "#31e2aa" }}>
        <DialogTitle id="simple-dialog-title">
          Select Purchase Request
        </DialogTitle>
        {/* <Button
          onClick={() => addNewPR()}
          style={{ float: "right", marginBottom: "2%" }}
          color="primary"
          variant={"contained"}
        >
          Add New PR
        </Button> */}

        {purchaseRequests ? (
          <div>
            <div>
              {/* <CustomTable
              tableData={purchaseRequests}
              tableDataKeys={tableDataKeys}
              tableHeading={tableHeading}
              action={actions}
              handleAdd={handleAdd}
              borderBottomColor={"#60d69f"}
              borderBottomWidth={20}
            /> */}

              <Table>
                {tableHeading !== undefined ? (
                  <TableHead
                    className={classes["TableHeader"]}
                    style={{
                      backgroundColor: "#2873cf",
                    }}
                  >
                    <TableRow>
                      {tableHeading.map((prop, index) => {
                        return (
                          <>
                            <TableCell
                              className={classes.tableHeadCell}
                              style={{
                                color: "white",
                                fontWeight: "700",
                                paddingTop: 30,
                                paddingBottom: 30,
                                textAlign: "center",
                                borderTopLeftRadius: index === 0 ? 45 : 0,
                                borderTopRightRadius:
                                  index === tableHeading.length - 1 ? 45 : 0,
                              }}
                              key={prop}
                            >
                              {prop}
                            </TableCell>
                          </>
                        );
                      })}
                    </TableRow>
                  </TableHead>
                ) : null}

                <div style={{ height: 25, width: "100%" }}></div>

                <TableBody style={{ marginTop: 20 }}>
                  {purchaseRequests &&
                    purchaseRequests.map((prop, index) => {
                      return (
                        <>
                          <TableRow
                            key={index}
                            className={classes.tableBodyRow}
                            style={{
                              backgroundColor: "white",
                              cursor: "pointer",
                            }}
                          >
                            {tableDataKeys
                              ? tableDataKeys.map((val, key) => {
                                  // console.log(key);
                                  if (val === "date") {
                                    return (
                                      <TableCell
                                        className={classes.tableCell}
                                        key={key}
                                        style={{
                                          textAlign: "center",
                                        }}
                                      >
                                        {formatDate(prop[val])}
                                      </TableCell>
                                    );
                                  } else {
                                    return (
                                      <TableCell
                                        className={classes.tableCell}
                                        key={key}
                                        onClick={() => handleClick(prop, val)}
                                        style={{
                                          textAlign: "center",
                                          cursor: props.handleModelMaterialReceiving
                                            ? "pointer"
                                            : "",

                                          borderTopLeftRadius:
                                            key === 0 ? 15 : 0,
                                          borderBottomLeftRadius:
                                            key === 0 ? 15 : 0,

                                          borderWidth: 0,
                                        }}
                                      >
                                        {Array.isArray(val)
                                          ? prop[val[0]]
                                            ? prop[val[0]][val[1]]
                                            : null
                                          : val.toLowerCase() === "timestamp"
                                          ? new Intl.DateTimeFormat(
                                              "en-US",
                                              dateOptions
                                            ).format(Date.parse(prop[val]))
                                          : // : `${replaceSlugToTitle(prop[val])}`}
                                            replaceSlugToTitle(prop[val])}
                                      </TableCell>
                                    );
                                  }
                                })
                              : null}
                            <TableCell
                              style={{
                                cursor: "pointer",
                                borderTopRightRadius: 15,
                                borderBottomRightRadius: 15,

                                borderWidth: 0,
                              }}
                              className={classes.tableCell}
                              colSpan="2"
                            >
                              {checkAvailability(prop) ? (
                                <span onClick={() => handleAdd(prop)}>
                                  <i
                                    style={{ color: "blue" }}
                                    className=" ml-10 zmdi zmdi-plus-circle zmdi-hc-3x"
                                  />
                                </span>
                              ) : (
                                <span onClick={() => handleRemove(prop)}>
                                  <i
                                    style={{ color: "blue" }}
                                    className=" ml-10 zmdi zmdi-check zmdi-hc-3x"
                                  />
                                </span>
                              )}
                            </TableCell>
                          </TableRow>

                          <TableRow style={{ height: 20 }} />
                        </>
                      );
                    })}
                </TableBody>
              </Table>
            </div>

            <div style={{ display: "flex", justifyContent: "flex-end" }}>
              <Button
                style={stylesB.stylesForButton}
                onClick={() => handleDone()}
                variant={"contained"}
                color={"primary"}
              >
                Done
              </Button>
            </div>
            <Notification msg={errorMsg} open={openNotification} />
          </div>
        ) : (
          <div
            style={{
              width: "100%",
              height: "100%",
              position: "fixed",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <Loader type="TailSpin" color="red" height={50} width={50} />
          </div>
        )}
        {/* </div> */}
      </DialogContent>
    </Dialog>
  );
}
