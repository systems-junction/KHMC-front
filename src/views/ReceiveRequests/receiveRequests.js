/*eslint-disable*/
import React, { useState, useEffect } from "react";
import Button from "@material-ui/core/Button";
import Notification from "../../components/Snackbar/Notification.js";
import CustomTable from "../../components/Table/Table";
import ConfirmationModal from "../../components/Modal/confirmationModal";
import axios from "axios";
import { getReceiveRequestsUrl, socketUrl, getReceiveRequestsSearch } from "../../public/endpoins";
import Loader from "react-loader-spinner";

import Header from "../../components/Header/Header";

import Add_New from "../../assets/img/Add_New.png";
import ReceiveItem from "../../assets/img/Receive Item.png";

import Search from "../../assets/img/Search.png";
import Control_Room from "../../assets/img/Control_Room.png";

import Edit from "../../assets/img/Edit.png";

import Inactive from "../../assets/img/Inactive.png";

import Active from "../../assets/img/Active.png";

import AccountCircle from '@material-ui/icons/SearchOutlined'
import InputAdornment from '@material-ui/core/InputAdornment'
import TextField from '@material-ui/core/TextField'
import { makeStyles } from "@material-ui/core/styles";

import "../../assets/jss/material-dashboard-react/components/loaderStyle.css";

import AddedPurchaseRequestTable from "../PurchaseOrders/addedPurchaseRequestTable";

import socketIOClient from "socket.io-client";
import Back_Arrow from "../../assets/img/Back_Arrow.png";

const tableHeading = [
  "PO No",
  "Date/Time Send",
  "Generated By",
  "Vendor",
  "Date/Time Received",
  "Status",
  "Action",
];

const tableDataKeys = [
  ["poId", "purchaseOrderNo"],
  ["poId", "sentAt"],
  ["poId", "generated"],
  ["vendorId", "englishName"],
  "updatedAt",
  "status",
];

const styles = {
  textFieldPadding: {
    paddingLeft: 0,
    paddingRight: 5,
  },

};


const useStylesForInput = makeStyles((theme) => ({
  input: {
    backgroundColor: 'white',
    borderRadius: 5,
    '&:after': {
      borderBottomColor: 'black',
    },
    '&:hover': {
      backgroundColor: 'white',
    },
    '&:disabled': {
      color: 'gray',
    },
  },
}))

const actions = { view: true };

export default function PurchaseRequest(props) {
  const [materialReceivings, setMaterialReceivings] = useState("");
  const classesInput = useStylesForInput()

  const [vendors, setVendor] = useState("");
  const [statues, setStatus] = useState("");
  const [purchaseRequests, setPurchaseRequests] = useState("");

  const [purchaseOrders, setPurchaseOrders] = useState("");

  const [deleteItem, setdeleteItem] = useState("");
  const [modalVisible, setModalVisible] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [openNotification, setOpenNotification] = useState(false);

  const [isDialogOpen, setDialogOpen] = useState(false);

  const [selectedPurchaseOrder, setSelectedPurchaseOrder] = useState("");
  const [selectedPurchaseRequest, setSelectedPurchaseRequest] = useState("");
  const [searchPatientQuery, setSearchPatientQuery] = useState('')

  if (openNotification) {
    setTimeout(() => {
      setOpenNotification(false);
      setErrorMsg("");
    }, 2000);
  }

  function getPurchaseRequests() {
    axios
      .get(getReceiveRequestsUrl)
      .then((res) => {
        if (res.data.success) {
          console.log(res.data.data);

          let temp = [];
          for (let i = 0; i < res.data.data.length; i++) {
            let obj = {
              ...res.data.data[i],
              poId: res.data.data[i].mrId.poId,
            };
            temp = [...temp, obj];
          }

          console.log("temp", temp);
          setMaterialReceivings(temp.reverse());
          setVendor(res.data.data.vendors);
          setStatus(res.data.data.statues);
          setPurchaseOrders(res.data.data.purchaseOrders);
          setPurchaseRequests(res.data.data.purchaseRequests);
        } else if (!res.data.success) {
          setErrorMsg(res.data.error);
          setOpenNotification(true);
        }
        return res;
      })
      .catch((e) => {
        console.log("error: ", e);
      });
  }

  useEffect(() => {
    const socket = socketIOClient(socketUrl);
    socket.emit("connection");
    socket.on("get_data", (data) => {
      let temp = [];
      for (let i = 0; i < data.length; i++) {
        let obj = {
          ...data[i],
          poId: data[i].mrId.poId,
        };
        temp = [...temp, obj];
      }
      setMaterialReceivings(temp.reverse());
      console.log("res after adding through socket", data);
    });

    getPurchaseRequests();

    return () => socket.disconnect();
  }, []);

  const addNewItem = () => {
    let path = `materialreceiving/add`;
    props.history.push({
      pathname: path,
      state: {
        comingFor: "add",
        vendors,
        statues,
        purchaseRequests,
        purchaseOrders,
      },
    });
  };

  function handleView(rec) {
    let path = `receiverequests/viewpo`;
    props.history.push({
      pathname: path,
      state: {
        comingFor: "edit",
        selectedItem: rec,
        vendors,
        statues,
        purchaseRequests,
        purchaseOrders,
        mrId: rec.mrId._id,
      },
    });
  }

  const handlePatientSearch =  (e) => {
    const a = e.target.value.replace(/[^\w\s]/gi, '')
    setSearchPatientQuery(a)
    if (a.length >= 3) {
       axios
        .get(
          getReceiveRequestsSearch + '/' + a
        )
        .then((res) => {
          if (res.data.success) {
            if (res.data.data.length > 0) {
              console.log(res.data.data)
              let temp = [];
              for (let i = 0; i < res.data.data.length; i++) {
                let obj = {
                  ...res.data.data[i],
                  poId: res.data.data[i].mrId.poId,
                };
                temp = [...temp, obj];
              }
              console.log(temp, "temmp");

              setMaterialReceivings(temp.reverse());
            } else {
              console.log(res.data.data, 'no-response');
              setMaterialReceivings([]);
            }
          }
        })
        .catch((e) => {
          console.log('error after searching patient request', e)
        })
    }

    else if(a.length == 0){
      getPurchaseRequests();
    }
    
  }

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        flex: 1,
        position: "fixed",
        width: "100%",
        height: "100%",
        backgroundColor: "#60d69f",
        overflowY: "scroll",
      }}
    >
      <Header />

      <div className="cPadding">
        <div className="subheader">
          <div>
            <img src={ReceiveItem} />
            <h4>Receive Request</h4>
          </div>
        </div>

        <div className='row' style={{marginLeft: '0px', marginRight: '0px', marginTop: '20px'}}>
            <div
              className='col-md-12 col-sm-9 col-8'
              style={styles.textFieldPadding}
            >
              <TextField
                className='textInputStyle'
                id='searchPatientQuery'
                type='text'
                variant='filled'
                label='Search By Return Request No'
                name={'searchPatientQuery'}
                value={searchPatientQuery}
                onChange={handlePatientSearch} 
                InputProps={{
                  endAdornment: (
                    <InputAdornment position='end'>
                      <AccountCircle />
                    </InputAdornment>
                  ),
                  className: classesInput.input,
                  classes: { input: classesInput.input },
                  disableUnderline: true,
                }}
              />
            </div>

            <div
              className='col-md-1 col-sm-2 col-2'
              style={{
                ...styles.textFieldPadding,
              }}
            >
            </div>

            <div
              className='col-md-1 col-sm-1 col-2'
              style={{
                ...styles.textFieldPadding,
              }}
            >
              
            </div>
          </div>

        <div
          style={{
            flex: 4,
            display: "flex",
            flexDirection: "column",
          }}
          className="container-fluid"
        >
          {materialReceivings &&  materialReceivings.length > 0  ? (
            <div>
              <div class="row">
                <CustomTable
                  tableData={materialReceivings}
                  tableDataKeys={tableDataKeys}
                  tableHeading={tableHeading}
                  action={actions}
                  handleView={handleView}
                  borderBottomColor={"#60d69f"}
                  borderBottomWidth={20}
                />
              </div>

              <Notification msg={errorMsg} open={openNotification} />

              <div class="row">
                <div
                  style={{
                    display: "flex",
                    flex: 1,
                    justifyContent: "space-between",
                    marginBottom: 40,
                    marginTop: 20,
                  }}
                >
                  <div style={{}}>
                    <img
                      onClick={() => props.history.goBack()}
                      src={Back_Arrow}
                      style={{ width: 60, height: 40, cursor: "pointer" }}
                    />
                  </div>
                </div>
              </div>
            </div>
          ) : materialReceivings && materialReceivings.length == 0 ? (
            <div className='row ' style={{ marginTop: '25px' }}>
              <div className='col-11'>
                <h3
                  style={{
                    color: 'white',
                    textAlign: 'center',
                    width: '100%',
                    position: 'absolute',
                  }}
                >
                  Opps...No Data Found
                </h3>
              </div>
              <div className='col-1' style={{ marginTop: 45 }}>
                <img
                  onClick={() => props.history.goBack()}
                  src={Back_Arrow}
                  style={{ maxWidth: '60%', height: 'auto', cursor: 'pointer' }}
                />
              </div>
            </div>
          ) : 
          ( <div className="LoaderStyle">
            <Loader type="TailSpin" color="red" height={50} width={50} />
          </div>
          )}
        </div>
      </div>
    </div>
  );
}
