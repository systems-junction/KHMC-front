/*eslint-disable*/
import React, { useState, useEffect } from "react";
import Button from "@material-ui/core/Button";
import Notification from "../../components/Snackbar/Notification.js";
import CustomTable from "../../components/Table/Table";
import ConfirmationModal from "../../components/Modal/confirmationModal";
import axios from "axios";
import { getReceiveRequestsUrl } from "../../public/endpoins";
import Loader from "react-loader-spinner";

import Header from "../../components/Header/Header";

import Add_New from "../../assets/img/Add_New.png";
import ReceiveItem from "../../assets/img/Receive Item.png";

import Search from "../../assets/img/Search.png";
import Control_Room from "../../assets/img/Control_Room.png";

import Edit from "../../assets/img/Edit.png";

import Inactive from "../../assets/img/Inactive.png";

import Active from "../../assets/img/Active.png";

import "../../assets/jss/material-dashboard-react/components/loaderStyle.css";

import AddedPurchaseRequestTable from "../PurchaseOrders/addedPurchaseRequestTable";

const tableHeading = [
  "PO No",
  "Date/Time Send",
  "Generated By",
  "Vendor",
  "Date/Time Received",
  "Status",
  "Action",
];

const tableDataKeys = [
  ['poId', 'purchaseOrderNo'],
  ['poId', 'sentAt'],
  ['poId', 'generated'],
  ["vendorId", "englishName"],
  "updatedAt",
  "status",
];

const actions = { view: true };

export default function PurchaseRequest(props) {
  const [materialReceivings, setMaterialReceivings] = useState("");
  const [vendors, setVendor] = useState("");
  const [statues, setStatus] = useState("");
  const [purchaseRequests, setPurchaseRequests] = useState("");

  const [purchaseOrders, setPurchaseOrders] = useState("");

  const [deleteItem, setdeleteItem] = useState("");
  const [modalVisible, setModalVisible] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [openNotification, setOpenNotification] = useState(false);

  const [isDialogOpen, setDialogOpen] = useState(false);

  const [selectedPurchaseOrder, setSelectedPurchaseOrder] = useState("");
  const [selectedPurchaseRequest, setSelectedPurchaseRequest] = useState("");

  if (openNotification) {
    setTimeout(() => {
      setOpenNotification(false);
      setErrorMsg("");
    }, 2000);
  }

  function getPurchaseRequests() {
    axios
      .get(getReceiveRequestsUrl)
      .then((res) => {
        if (res.data.success) {
          // console.log(res.data.data);

          let temp = [];
          for (let i = 0; i < res.data.data.length; i++) {
            let obj={
              ...res.data.data[i],
             poId: res.data.data[i].mrId.poId
            }
            temp = [...temp,obj];
          }

          console.log('temp',temp)
          setMaterialReceivings(temp);
          setVendor(res.data.data.vendors);
          setStatus(res.data.data.statues);
          setPurchaseOrders(res.data.data.purchaseOrders);
          setPurchaseRequests(res.data.data.purchaseRequests);
        } else if (!res.data.success) {
          setErrorMsg(res.data.error);
          setOpenNotification(true);
        }
        return res;
      })
      .catch((e) => {
        console.log("error: ", e);
      });
  }

  useEffect(() => {
    getPurchaseRequests();
  }, []);

  const addNewItem = () => {
    let path = `materialreceiving/add`;
    props.history.push({
      pathname: path,
      state: {
        comingFor: "add",
        vendors,
        statues,
        purchaseRequests,
        purchaseOrders,
      },
    });
  };

  function handleView(rec) {
    let path = `receiverequests/viewpo`;
    props.history.push({
      pathname: path,
      state: {
        comingFor: "edit",
        selectedItem: rec,
        vendors,
        statues,
        purchaseRequests,
        purchaseOrders,
        mrId: rec.mrId._id
      },
    });
  }

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        flex: 1,
        position: "fixed",
        width: "100%",
        height: "100%",
        backgroundColor: "#60d69f",
        overflowY: "scroll",
      }}
    >
      <Header />

      <div className="cPadding">
        <div className="subheader">
          <div>
            <img src={ReceiveItem} />
            <h4>Receive Request</h4>
          </div>
        </div>

        <div
          style={{
            flex: 4,
            display: "flex",
            flexDirection: "column",
          }}
        >
          {materialReceivings ? (
            <div>
              <div>
                <CustomTable
                  tableData={materialReceivings}
                  tableDataKeys={tableDataKeys}
                  tableHeading={tableHeading}
                  action={actions}
                  handleView={handleView}
                  borderBottomColor={"#60d69f"}
                  borderBottomWidth={20}
                />
              </div>

              <Notification msg={errorMsg} open={openNotification} />
            </div>
          ) : (
            <div className="LoaderStyle">
              <Loader type="TailSpin" color="red" height={50} width={50} />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
